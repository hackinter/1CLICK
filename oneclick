#!/bin/bash

# JSON file where the tool data is stored
TOOLS_FILE="tools.json"

# Tool installation function
install_tool() {
    TOOL_NAME=$1
    TOOL_URL=$2
    TOOL_TYPE=$3

    echo -e "Installing $TOOL_NAME..."

    if [[ "$TOOL_TYPE" == "go" ]]; then
        echo -e "Using go install for $TOOL_NAME..."
        go install "$TOOL_URL" || echo -e "Error installing $TOOL_NAME with go install!"
    else
        git clone "$TOOL_URL" || { echo -e "Error cloning $TOOL_NAME!"; return 1; }

        TOOL_DIR=$(basename "$TOOL_URL" .git)
        echo -e "Checking directory: $TOOL_DIR"
        if [[ -d "$TOOL_DIR" ]]; then
            TOOL_EXEC_PATH="$TOOL_DIR/$TOOL_NAME"
            if [[ -f "$TOOL_EXEC_PATH" ]]; then
                echo -e "Copying $TOOL_NAME to /usr/bin..."
                sudo cp "$TOOL_EXEC_PATH" /usr/bin/
                sudo chmod +x /usr/bin/"$TOOL_NAME"
                echo -e "$TOOL_NAME has been successfully moved to /usr/bin."
            else
                echo -e "Executable file for $TOOL_NAME not found."
            fi
        else
            echo -e "Failed to find $TOOL_NAME directory after cloning."
        fi
    fi
}

# Install top 20 tools function
install_top_20() {
    echo -e "\n[+] Installing Top 20 Tools...\n"
    jq -c '.top_20[]' "$TOOLS_FILE" | while read -r TOOL; do
        NAME=$(echo "$TOOL" | jq -r '.name')
        URL=$(echo "$TOOL" | jq -r '.url')
        TOOL_TYPE=$(echo "$TOOL" | jq -r '.type // "git"')  # default to git if type is not defined
        install_tool "$NAME" "$URL" "$TOOL_TYPE"
    done
    echo -e "\n[+] All Top 20 Tools Installed Successfully!\n"
}

# Install all tools function
install_all_tools() {
    echo -e "\n[+] Installing All Tools...\n"
    jq -c '.top_20[], .all_tools[]' "$TOOLS_FILE" | while read -r TOOL; do
        NAME=$(echo "$TOOL" | jq -r '.name')
        URL=$(echo "$TOOL" | jq -r '.url')
        TOOL_TYPE=$(echo "$TOOL" | jq -r '.type // "git"')  # default to git if type is not defined
        install_tool "$NAME" "$URL" "$TOOL_TYPE"
    done
    echo -e "\n[+] All Tools Installed Successfully!\n"
}

# Install selected tools function
install_selected_tools() {
    echo -e "\n[+] Installing Selected Tools...\n"
    IFS=',' read -ra TOOL_LIST <<< "$1"
    for TOOL_NAME in "${TOOL_LIST[@]}"; do
        TOOL=$(jq -c '.top_20[], .all_tools[] | select(.name=="'"$TOOL_NAME"'")' "$TOOLS_FILE")
        if [[ -n $TOOL ]]; then
            NAME=$(echo "$TOOL" | jq -r '.name')
            URL=$(echo "$TOOL" | jq -r '.url')
            TOOL_TYPE=$(echo "$TOOL" | jq -r '.type // "git"')  # default to git if type is not defined
            install_tool "$NAME" "$URL" "$TOOL_TYPE"
        else
            echo "[-] Tool $TOOL_NAME not found in JSON file."
        fi
    done
    echo -e "\n[+] Selected Tools Installed Successfully!\n"
}

# List all available tools
list_tools() {
    echo -e "\n[+] Available Tools:\n"
    jq -r '.top_20[].name, .all_tools[].name' "$TOOLS_FILE"
}

# Banner function (Red color)
show_banner() {
    echo -e "\e[31m"  # ANSI code for red color
    echo -e "╔═╗╔╗╔╔═╗  ╔═╗╦  ╦╔═╗╦╔═"
    echo -e "║ ║║║║║╣───║  ║  ║║  ╠╩╗"
    echo -e "╚═╝╝╚╝╚═╝  ╚═╝╩═╝╩╚═╝╩ ╩"
    echo -e ">>V1.0>oneclick@hackinter]\n\n"
    echo -e "\e[0m"  # ANSI code reset to default color
    echo -e "Usage:\n"
    echo -e "./oneclick -i top-bughunt-tools [ to install top bug hunting tools ]"
    echo -e "./oneclick -i toolname [ to install single tool ]"
    echo -e "./oneclick -i all [ to install all tools ]"
    echo -e "./oneclick -i list [ to list all tools ]"
    echo -e "./oneclick -b toolname,toolname [ to install multiple tools ]\n"
}

# Help function
usage() {
    show_banner
    exit 1
}

# Command line parameter processing
if [[ "$#" -eq 0 ]]; then
    usage
fi

while getopts ":i:b:l" opt; do
    case $opt in
        i)
            if [[ "$OPTARG" == "top-bughunt-tools" ]]; then
                install_top_20
            elif [[ "$OPTARG" == "all" ]]; then
                install_all_tools
            elif [[ "$OPTARG" == "list" ]]; then
                list_tools
            else
                install_selected_tools "$OPTARG"
            fi
            ;;
        b)
            install_selected_tools "$OPTARG"
            ;;
        l)
            list_tools
            ;;
        *)
            usage
            ;;
    esac
done
